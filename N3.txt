1. Teraz, podobnie jak w Notatki2 stworzymy handler do obsługi zapytania zwrotu konkretnej aktywności (Activity). Tworzymy nową klasę (w nowym pliku Application/Activities/) Details (podobnie jak wcześniej, jedynie dodajemy właściwość Guid Id - potrzebna jest nam, bo mamy zwrócić konkretną aktywność):

public class Details
    {
        public class Query : IRequest<Activity>
        {
            public Guid Id { get; set; }
        }

        // drugi z parametrów, to typ jaki zwracamy
        public class Handler : IRequestHandler<Query, Activity>
        {
            private readonly DataContext _context;

            public Handler(DataContext context)
            {
                _context = context;
            }

            public async Task<Activity> Handle(Query request, CancellationToken 					cancellationToken)
            {
                return await _context.Activities.FindAsync(request.Id);
            }
        }
    }

2. Przerabiamy metodę GetActivity w ActivitiesController:

[HttpGet("{id}")] // api/activities/24499d84-adfb-47a7-ba97-c336a289a352
        public async Task<ActionResult<Activity>> GetActivity(Guid id)
        {
            return await Mediator.Send(new Details.Query { Id = id });
        }

3. Teraz stworzymy handler do tworzenia aktywności. Znowu tworzymy nową klasę Create, a w jej wnętrzu zamiast klasy Query (która coś zwraca) klasę Command (nic nie zwraca):

public class Create
    {
        public class Command : IRequest
        {
            public Activity Activity { get; set; }
        }

        public class Handler : IRequestHandler<Command>
        {
            private readonly DataContext _context;

            public Handler(DataContext context) 
            {
                _context = context;
            }

            public async Task<Unit> Handle(Command request, CancellationToken 					cancellationToken)
            {
                // nie używamy wersji asynchronicznej metody Add,
                // na tym etapie dodajemy aktywność do pamięci
                _context.Activities.Add(request.Activity);

                await _context.SaveChangesAsync();

		// tak naprawdę nie zwracamy konkretnej wartości, tylko informujemy
                // że proces obsługi się zakończył
		// Unit is a ''nothing object''
                return Unit.Value;
            }
        }
    }

4. Przechodzimy teraz do kontrolera i tworzymy nowy endpoint (typu Post):

        [HttpPost]
        public async Task<IActionResult> CreateActivity(Activity activity)
        {
            return Ok(await Mediator.Send(new Create.Command { Activity = activity }));
        }