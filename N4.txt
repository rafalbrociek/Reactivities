1. Tworzymy teraz nowy plik Edit (warstwa Application/Activities) - zupełnie podobnie jak poprzednie. Tu również jak w Create nic nie zwracamy, stąd zamiast Query używamy Command.

using Domain;
using MediatR;
using Persistence;

namespace Application.Activities
{
    public class Edit
    {
        public class Command : IRequest
        {
            public Activity Activity { get; set; }
        }

        public class Handler : IRequestHandler<Command>
        {
            private readonly DataContext _context;

            public Handler(DataContext context)
            {
                _context = context;
            }
            public async Task<Unit> Handle(Command request, CancellationToken 					cancellationToken)
            {
                // pobieramy aktywność z bazą danych po id
                var activity = await _context.Activities.FindAsync(request.Activity.Id);
                // edytujemy wybrane pola aktywności
		// można tak jak niżej właściwość po właściwości albo można użyć 
		// auto mapper - o tym potem
                activity.Title = request.Activity.Title ?? activity.Title;
                // zapisujemy zmiany
                await _context.SaveChangesAsync();

                return Unit.Value;
            }
        }
    }
}


2. Teraz dodajemy kolejny endpoint w kontrolerze (podobnie jak poprzednio):

	[HttpPut("{id}")]
        public async Task<IActionResult> EditActivity(Guid id, Activity activity)
        {
            // dodajemy id do przekazanej aktywności
            activity.Id = id;
            return Ok(await Mediator.Send(new Edit.Command { Activity = activity }));
        }


3. Teraz skorzystamy z automapper. Z NuGet instalujemy paczkę AutoMapper.Extensions.Microsoft.DependencyInjection. Tworzymy w projekcie Application nowy folder Core a w nim plik MappingProfiles.cs. Przypomnijmy automapper użyjemy np. w klasie Edit.Handler do "przepisania" właśności obiektu typu Activity (request.Activity - parametr metody Handle) do innego obiektu typu Activity (pobranego z bazy danych - będziemy chcieli go edytować). Żeby nie przepisywać ręcznie wszystkich właściwości użyjemy autoMappera:

namespace Application.Core
{
    public class MappingProfiles : Profile
    {
        public MappingProfiles()
        {
            // tworzymy mapę <zJakiegoObiektu, naJaki>
            CreateMap<Activity, Activity>();
        }
    }
}

4. Teraz tylko używamy autoMappera w klasie Edit.Handler. Wstrzykujemy obiekt typu IMapper:

private readonly DataContext _context;
            private readonly IMapper _mapper;

            public Handler(DataContext context, IMapper mapper)
            {
                _context = context;
                _mapper = mapper;
            }

	    ... [w klasie Handle]:
		_mapper.Map(request.Activity, activity);

5. Dodajemy AutoMappera jako serwis w pliku Program.cs:

builder.Services.AddAutoMapper(typeof(MappingProfiles).Assembly);
